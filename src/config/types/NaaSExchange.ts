/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AssetStruct = {
  assetClass: BytesLike;
  data: BytesLike;
  value: BigNumberish;
};

export type AssetStructOutput = [string, string, BigNumber] & {
  assetClass: string;
  data: string;
  value: BigNumber;
};

export interface NaaSExchangeInterface extends utils.Interface {
  functions: {
    "EIP_1271_MAGICVALUE()": FunctionFragment;
    "approveOrderHash_(bytes32)": FunctionFragment;
    "approveOrder_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "approved(address,bytes32)": FunctionFragment;
    "atomicMatch_(uint256[16],bytes4[2],bytes,bytes,bytes,bytes,uint8[2],bytes32,bytes)": FunctionFragment;
    "codename()": FunctionFragment;
    "defaultFeeReceiver()": FunctionFragment;
    "feeReceivers(address)": FunctionFragment;
    "fills(address,bytes32)": FunctionFragment;
    "hashOrder_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "initialize(address[],uint256,address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "registries(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltiesRegistry()": FunctionFragment;
    "setDefaultFeeReceiver(address)": FunctionFragment;
    "setFeeReceiver(address,address)": FunctionFragment;
    "setOrderFill_(bytes32,uint256)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setRoyaltiesRegistry(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithFees(address,address,address,(bytes4,bytes,uint256),(bytes4,bytes,uint256),bytes,bytes)": FunctionFragment;
    "validateOrderAuthorization_(bytes32,address,bytes)": FunctionFragment;
    "validateOrderParameters_(address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EIP_1271_MAGICVALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrderHash_",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicMatch_",
    values: [
      BigNumberish[],
      [BytesLike, BytesLike],
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "codename", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceivers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fills",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder_",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registries", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderFill_",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithFees",
    values: [
      string,
      string,
      string,
      AssetStruct,
      AssetStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderAuthorization_",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderParameters_",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EIP_1271_MAGICVALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOrderHash_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "atomicMatch_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codename", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderFill_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderAuthorization_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderParameters_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "OrderFillChanged(bytes32,address,uint256)": EventFragment;
    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(tuple,address,address,bytes4,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFillChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersMatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type OrderApprovedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  {
    hash: string;
    registry: string;
    maker: string;
    staticTarget: string;
    staticSelector: string;
    staticExtradata: string;
    maximumFill: BigNumber;
    listingTime: BigNumber;
    expirationTime: BigNumber;
    salt: BigNumber;
    orderbookInclusionDesired: boolean;
  }
>;

export type OrderApprovedEventFilter = TypedEventFilter<OrderApprovedEvent>;

export type OrderFillChangedEvent = TypedEvent<
  [string, string, BigNumber],
  { hash: string; maker: string; newFill: BigNumber }
>;

export type OrderFillChangedEventFilter =
  TypedEventFilter<OrderFillChangedEvent>;

export type OrdersMatchedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string],
  {
    firstHash: string;
    secondHash: string;
    firstMaker: string;
    secondMaker: string;
    newFirstFill: BigNumber;
    newSecondFill: BigNumber;
    metadata: string;
  }
>;

export type OrdersMatchedEventFilter = TypedEventFilter<OrdersMatchedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [AssetStructOutput, string, string, string, string],
  {
    asset: AssetStructOutput;
    from: string;
    to: string;
    transferType: string;
    assetExtraData: string;
  }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface NaaSExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NaaSExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP_1271_MAGICVALUE(overrides?: CallOverrides): Promise<[string]>;

    approveOrderHash_(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    codename(overrides?: CallOverrides): Promise<[string]>;

    defaultFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    feeReceivers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    initialize(
      registryAddrs: string[],
      newProtocolFee: BigNumberish,
      newDefaultFeeReceiver: string,
      newRoyaltiesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registries(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltiesRegistry(overrides?: CallOverrides): Promise<[string]>;

    setDefaultFeeReceiver(
      newDefaultFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceiver(
      token: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrderFill_(
      hash_: BytesLike,
      fill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      newProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesRegistry(
      newRoyaltiesRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWithFees(
      registry: string,
      from: string,
      to: string,
      asset: AssetStruct,
      counterAsset: AssetStruct,
      assetExtraData: BytesLike,
      counterAssetExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateOrderAuthorization_(
      hash_: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  EIP_1271_MAGICVALUE(overrides?: CallOverrides): Promise<string>;

  approveOrderHash_(
    hash_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveOrder_(
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    orderbookInclusionDesired: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approved(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  atomicMatch_(
    uints: BigNumberish[],
    staticSelectors: [BytesLike, BytesLike],
    firstExtradata: BytesLike,
    firstCalldata: BytesLike,
    secondExtradata: BytesLike,
    secondCalldata: BytesLike,
    howToCalls: [BigNumberish, BigNumberish],
    metadata: BytesLike,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  codename(overrides?: CallOverrides): Promise<string>;

  defaultFeeReceiver(overrides?: CallOverrides): Promise<string>;

  feeReceivers(arg0: string, overrides?: CallOverrides): Promise<string>;

  fills(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashOrder_(
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    registryAddrs: string[],
    newProtocolFee: BigNumberish,
    newDefaultFeeReceiver: string,
    newRoyaltiesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  registries(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltiesRegistry(overrides?: CallOverrides): Promise<string>;

  setDefaultFeeReceiver(
    newDefaultFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceiver(
    token: string,
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrderFill_(
    hash_: BytesLike,
    fill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    newProtocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesRegistry(
    newRoyaltiesRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWithFees(
    registry: string,
    from: string,
    to: string,
    asset: AssetStruct,
    counterAsset: AssetStruct,
    assetExtraData: BytesLike,
    counterAssetExtraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateOrderAuthorization_(
    hash_: BytesLike,
    maker: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateOrderParameters_(
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EIP_1271_MAGICVALUE(overrides?: CallOverrides): Promise<string>;

    approveOrderHash_(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    codename(overrides?: CallOverrides): Promise<string>;

    defaultFeeReceiver(overrides?: CallOverrides): Promise<string>;

    feeReceivers(arg0: string, overrides?: CallOverrides): Promise<string>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      registryAddrs: string[],
      newProtocolFee: BigNumberish,
      newDefaultFeeReceiver: string,
      newRoyaltiesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    registries(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltiesRegistry(overrides?: CallOverrides): Promise<string>;

    setDefaultFeeReceiver(
      newDefaultFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceiver(
      token: string,
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderFill_(
      hash_: BytesLike,
      fill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      newProtocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesRegistry(
      newRoyaltiesRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithFees(
      registry: string,
      from: string,
      to: string,
      asset: AssetStruct,
      counterAsset: AssetStruct,
      assetExtraData: BytesLike,
      counterAssetExtraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOrderAuthorization_(
      hash_: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)"(
      hash?: BytesLike | null,
      registry?: null,
      maker?: string | null,
      staticTarget?: null,
      staticSelector?: null,
      staticExtradata?: null,
      maximumFill?: null,
      listingTime?: null,
      expirationTime?: null,
      salt?: null,
      orderbookInclusionDesired?: null
    ): OrderApprovedEventFilter;
    OrderApproved(
      hash?: BytesLike | null,
      registry?: null,
      maker?: string | null,
      staticTarget?: null,
      staticSelector?: null,
      staticExtradata?: null,
      maximumFill?: null,
      listingTime?: null,
      expirationTime?: null,
      salt?: null,
      orderbookInclusionDesired?: null
    ): OrderApprovedEventFilter;

    "OrderFillChanged(bytes32,address,uint256)"(
      hash?: BytesLike | null,
      maker?: string | null,
      newFill?: null
    ): OrderFillChangedEventFilter;
    OrderFillChanged(
      hash?: BytesLike | null,
      maker?: string | null,
      newFill?: null
    ): OrderFillChangedEventFilter;

    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)"(
      firstHash?: null,
      secondHash?: null,
      firstMaker?: string | null,
      secondMaker?: string | null,
      newFirstFill?: null,
      newSecondFill?: null,
      metadata?: BytesLike | null
    ): OrdersMatchedEventFilter;
    OrdersMatched(
      firstHash?: null,
      secondHash?: null,
      firstMaker?: string | null,
      secondMaker?: string | null,
      newFirstFill?: null,
      newSecondFill?: null,
      metadata?: BytesLike | null
    ): OrdersMatchedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(tuple,address,address,bytes4,bytes)"(
      asset?: null,
      from?: null,
      to?: null,
      transferType?: null,
      assetExtraData?: null
    ): TransferEventFilter;
    Transfer(
      asset?: null,
      from?: null,
      to?: null,
      transferType?: null,
      assetExtraData?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    EIP_1271_MAGICVALUE(overrides?: CallOverrides): Promise<BigNumber>;

    approveOrderHash_(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    codename(overrides?: CallOverrides): Promise<BigNumber>;

    defaultFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceivers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registryAddrs: string[],
      newProtocolFee: BigNumberish,
      newDefaultFeeReceiver: string,
      newRoyaltiesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    registries(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltiesRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultFeeReceiver(
      newDefaultFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceiver(
      token: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrderFill_(
      hash_: BytesLike,
      fill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      newProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesRegistry(
      newRoyaltiesRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWithFees(
      registry: string,
      from: string,
      to: string,
      asset: AssetStruct,
      counterAsset: AssetStruct,
      assetExtraData: BytesLike,
      counterAssetExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateOrderAuthorization_(
      hash_: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP_1271_MAGICVALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveOrderHash_(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approved(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atomicMatch_(
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    codename(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeReceivers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registryAddrs: string[],
      newProtocolFee: BigNumberish,
      newDefaultFeeReceiver: string,
      newRoyaltiesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltiesRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDefaultFeeReceiver(
      newDefaultFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceiver(
      token: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrderFill_(
      hash_: BytesLike,
      fill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      newProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesRegistry(
      newRoyaltiesRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWithFees(
      registry: string,
      from: string,
      to: string,
      asset: AssetStruct,
      counterAsset: AssetStruct,
      assetExtraData: BytesLike,
      counterAssetExtraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateOrderAuthorization_(
      hash_: BytesLike,
      maker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrderParameters_(
      registry: string,
      maker: string,
      staticTarget: string,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
