/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PartStruct = { account: string; value: BigNumberish };

export type PartStructOutput = [string, BigNumber] & {
  account: string;
  value: BigNumber;
};

export interface NaaSRoyaltiesProviderInterface extends utils.Interface {
  functions: {
    "extraRoyaltiesByToken(address)": FunctionFragment;
    "extraRoyaltiesByTokenAndCollectionId(bytes32)": FunctionFragment;
    "getRoyalties(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltiesByToken(address)": FunctionFragment;
    "royaltiesByTokenAndCollectionId(bytes32)": FunctionFragment;
    "royaltiesByTokenAndTokenId(bytes32)": FunctionFragment;
    "setExtraRoyaltiesForCollectionId(address,uint256,(address,uint256)[])": FunctionFragment;
    "setExtraRoyaltiesForToken(address,(address,uint256)[])": FunctionFragment;
    "setRoyaltiesForCollectionId(address,uint256,(address,uint256)[])": FunctionFragment;
    "setRoyaltiesForToken(address,(address,uint256)[])": FunctionFragment;
    "setRoyaltiesForTokenId(address,uint256,(address,uint256)[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "extraRoyaltiesByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "extraRoyaltiesByTokenAndCollectionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesByTokenAndCollectionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesByTokenAndTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraRoyaltiesForCollectionId",
    values: [string, BigNumberish, PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraRoyaltiesForToken",
    values: [string, PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesForCollectionId",
    values: [string, BigNumberish, PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesForToken",
    values: [string, PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesForTokenId",
    values: [string, BigNumberish, PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "extraRoyaltiesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraRoyaltiesByTokenAndCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesByTokenAndCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesByTokenAndTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraRoyaltiesForCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraRoyaltiesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesForCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesForTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ExtraRoyaltiesSet(address,int256,int256,tuple[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoyaltiesAccountUpdated(address,int256,int256,address,address)": EventFragment;
    "RoyaltiesSet(address,int256,int256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtraRoyaltiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesAccountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
}

export type ExtraRoyaltiesSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, PartStructOutput[]],
  {
    token: string;
    collectionId: BigNumber;
    tokenId: BigNumber;
    royalties: PartStructOutput[];
  }
>;

export type ExtraRoyaltiesSetEventFilter =
  TypedEventFilter<ExtraRoyaltiesSetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RoyaltiesAccountUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  {
    token: string;
    collectionId: BigNumber;
    tokenId: BigNumber;
    oldAccount: string;
    newAccount: string;
  }
>;

export type RoyaltiesAccountUpdatedEventFilter =
  TypedEventFilter<RoyaltiesAccountUpdatedEvent>;

export type RoyaltiesSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, PartStructOutput[]],
  {
    token: string;
    collectionId: BigNumber;
    tokenId: BigNumber;
    royalties: PartStructOutput[];
  }
>;

export type RoyaltiesSetEventFilter = TypedEventFilter<RoyaltiesSetEvent>;

export interface NaaSRoyaltiesProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NaaSRoyaltiesProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    extraRoyaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    extraRoyaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PartStructOutput[]]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    royaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    setExtraRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExtraRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesForTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  extraRoyaltiesByToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  extraRoyaltiesByTokenAndCollectionId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoyalties(
    token: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PartStructOutput[]>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltiesByToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  royaltiesByTokenAndCollectionId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  royaltiesByTokenAndTokenId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setExtraRoyaltiesForCollectionId(
    token: string,
    collectionId: BigNumberish,
    royalties: PartStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExtraRoyaltiesForToken(
    token: string,
    royalties: PartStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesForCollectionId(
    token: string,
    collectionId: BigNumberish,
    royalties: PartStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesForToken(
    token: string,
    royalties: PartStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesForTokenId(
    token: string,
    tokenId: BigNumberish,
    royalties: PartStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    extraRoyaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extraRoyaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PartStructOutput[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltiesByToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    royaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setExtraRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesForTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExtraRoyaltiesSet(address,int256,int256,tuple[])"(
      token?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      royalties?: null
    ): ExtraRoyaltiesSetEventFilter;
    ExtraRoyaltiesSet(
      token?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      royalties?: null
    ): ExtraRoyaltiesSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoyaltiesAccountUpdated(address,int256,int256,address,address)"(
      token?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      oldAccount?: null,
      newAccount?: null
    ): RoyaltiesAccountUpdatedEventFilter;
    RoyaltiesAccountUpdated(
      token?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      oldAccount?: null,
      newAccount?: null
    ): RoyaltiesAccountUpdatedEventFilter;

    "RoyaltiesSet(address,int256,int256,tuple[])"(
      token?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
    RoyaltiesSet(
      token?: string | null,
      collectionId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
  };

  estimateGas: {
    extraRoyaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraRoyaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExtraRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExtraRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesForTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    extraRoyaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraRoyaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltiesByTokenAndCollectionId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExtraRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExtraRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesForCollectionId(
      token: string,
      collectionId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesForToken(
      token: string,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesForTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
